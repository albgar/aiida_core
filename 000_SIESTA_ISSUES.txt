Siesta plugin issues

-- The CML file stores forces at each geometry iteration, but not the
   stress. Trajectories (not implemented yet) will then contain only
   positions and forces.

-- The "restart" capability is not implemented yet.

-- K-point sampling for the scf cycle follows Siesta convention: the
   absence of a 'kpoints' node implies gamma-point sampling.
   
-- Band structures are fundamentally different from BZ
   sampling. K-point specification is different.

   The following description provided by Emanuele Bosoni:

   The user should define in input bandskpoints, a KpointsData
   structure containing information on the kpoints where to calculate bands.
   !!!bandskpoints.set_cell(..,..) HAS ALWAYS TO BE SET, OTHERWISE PARSINGFAIL!!!
   !!!  (THIS SHOULD BE IMPROVED, AT LEAST I SHOULD PUT AN ERROR MESSAGE)     !!!
   Distinction between BandLines and BandPoints is automatically done
   looking for labels in bandskpoints: I assume it's reasonable to expect 
   some labels (Gamma, X, L, ...) when you define a line, no labels for points.

   File /example/submission/test_siesta_cif_bands.py sould help to understand.
   Another possibility would be to set a flag in input.

   BandLinesScale ReciprocalLatticeVectors is always set.

   Bands are stored using the already implemented BandsData class and parsed
   reading the ASCII file .bands (we have to discuss about .xml).
   You can easly export bands in various formats. Be aware that kpoints
   in siesta file .bands are in 2*pi/A where A in bohr, while
   in aiida A is in Ang (a factor 1.889725989 of difference).
   Kpoints for bands are stored twice, but it's the same for QuantumEspresso.

   NOTE: The tests for the 'bands' functionality do not work if
   "bandlines" or "paths" are specified.
      
-- Units are now given in XX_units entries, but the XX itself might
   not be standard.

-- Basis-set info is now dealt with as a special set of parameters,
   but in raw form, which is not easily subject to queries.
   
   



